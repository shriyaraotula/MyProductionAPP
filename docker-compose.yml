version: '3.9'

services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Plmoknijb1234
      POSTGRES_DB: myappdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myappdb"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app_net

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app_net

  web:
    build: .
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "sleep 5 && uvicorn MyProductionAPP.main:app --host 0.0.0.0 --port 8000"
    networks:
      app_net:
        aliases:
          - web

  nginx:
    build: ./nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - app_net

volumes:
  postgres_data:

networks:
  app_net:
    driver: bridge
