name: CI/CD - Build, Test, and Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Plmoknijb1234
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run tests with pytest
        env:
          ENABLE_KAFKA: 0
          DB_HOST: localhost
          DB_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Plmoknijb1234
          POSTGRES_DB: myappdb
          DATABASE_URL: postgresql://postgres:Plmoknijb1234@localhost:5432/myappdb
        run: pytest --disable-warnings

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest .

      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to or create the application directory
            cd ~
            if [ -d "MyProductionAPP" ]; then
              cd MyProductionAPP
              git pull origin master
            else
              git clone https://github.com/${{ github.repository }}.git MyProductionAPP
              cd MyProductionAPP
            fi

            # Stop existing containers
            docker-compose down

            # Pull latest images and rebuild
            docker-compose pull
            docker-compose up -d --build

            # Clean up unused images
            docker image prune -f
          EOF
