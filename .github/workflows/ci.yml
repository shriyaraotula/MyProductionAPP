name: CI/CD - Build, Test, and Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Plmoknijb1234
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run tests with pytest
        env:
          ENABLE_KAFKA: 0
          DB_HOST: localhost
          DB_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Plmoknijb1234
          POSTGRES_DB: myappdb
          DATABASE_URL: postgresql://postgres:Plmoknijb1234@localhost:5432/myappdb
        run: pytest --disable-warnings

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest .

      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -o ConnectTimeout=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "✅ SSH connection successful"'

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on any error

            echo "🚀 Starting deployment on $(date)"

            # Update system packages
            sudo apt-get update -qq

            # Install Docker and Docker Compose if not already installed
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "📦 Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Navigate to or create the application directory
            cd ~
            if [ -d "MyProductionAPP" ]; then
              echo "📁 Updating existing repository..."
              cd MyProductionAPP
              git pull origin master || git pull origin main || true
            else
              echo "📁 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git MyProductionAPP
              cd MyProductionAPP
            fi

            # Create production .env file
            echo "📝 Setting up environment..."
            cat > .env << 'ENVEOF'
            DATABASE_URL=postgresql://postgres:Plmoknijb1234@db:5432/myappdb
            SECRET_KEY=production_secret_key_change_this
            ALGORITHM=HS256
            ACCESS_TOKEN_EXPIRE_MINUTES=30
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=Plmoknijb1234
            POSTGRES_DB=myappdb
            DB_HOST=db
            DB_PORT=5432
            ENABLE_KAFKA=1
            KAFKA_BOOTSTRAP_SERVERS=kafka:9092
            KAFKA_TOPIC=orders
            ENVIRONMENT=production
            ENVEOF

            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            sudo docker-compose down || true

            # Clean up old images
            echo "🧹 Cleaning up old images..."
            sudo docker system prune -f || true

            # Build and start new containers
            echo "🐳 Building and starting containers..."
            sudo docker-compose up -d --build

            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 45

            # Check if services are running
            echo "✅ Checking service status..."
            sudo docker-compose ps

            # Test the application
            echo "🏥 Testing application..."
            for i in {1..5}; do
              if curl -f http://localhost/health; then
                echo "✅ Application is healthy!"
                break
              else
                echo "⏳ Attempt $i failed, waiting..."
                sleep 10
              fi
            done

            echo "✅ Deployment completed on $(date)!"
          EOFname: CI/CD - Build, Test, and Deploy

             on:
               push:
                 branches: [ master, main ]
               pull_request:
                 branches: [ master, main ]

             jobs:
               build:
                 runs-on: ubuntu-latest

                 services:
                   postgres:
                     image: postgres:15
                     env:
                       POSTGRES_USER: postgres
                       POSTGRES_PASSWORD: Plmoknijb1234
                       POSTGRES_DB: myappdb
                     ports:
                       - 5432:5432
                     options: >-
                       --health-cmd="pg_isready -U postgres"
                       --health-interval=10s
                       --health-timeout=5s
                       --health-retries=5

                 steps:
                   - name: Checkout code
                     uses: actions/checkout@v4

                   - name: Set up Python
                     uses: actions/setup-python@v4
                     with:
                       python-version: '3.11'

                   - name: Install dependencies
                     run: |
                       python -m pip install --upgrade pip
                       pip install -r requirements.txt

                   - name: Lint with flake8
                     run: |
                       pip install flake8
                       flake8 .

                   - name: Run tests with pytest
                     env:
                       ENABLE_KAFKA: 0
                       DB_HOST: localhost
                       DB_PORT: 5432
                       POSTGRES_USER: postgres
                       POSTGRES_PASSWORD: Plmoknijb1234
                       POSTGRES_DB: myappdb
                       DATABASE_URL: postgresql://postgres:Plmoknijb1234@localhost:5432/myappdb
                     run: pytest --disable-warnings

                   - name: Log in to Docker Hub
                     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
                     run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

                   - name: Build Docker Image
                     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
                     run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest .

                   - name: Push to Docker Hub
                     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
                     run: docker push ${{ secrets.DOCKER_USERNAME }}/myproductionapp:latest

               deploy:
                 needs: build
                 runs-on: ubuntu-latest
                 if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

                 steps:
                   - name: Checkout code
                     uses: actions/checkout@v4

                   - name: Setup SSH Agent
                     uses: webfactory/ssh-agent@v0.8.0
                     with:
                       ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

                   - name: Add EC2 to known hosts
                     run: |
                       ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

                   - name: Test SSH Connection
                     run: |
                       ssh -o ConnectTimeout=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "✅ SSH connection successful"'

                   - name: Deploy to EC2
                     run: |
                       ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
                         set -e  # Exit on any error

                         echo "🚀 Starting deployment on $(date)"

                         # Update system packages
                         sudo apt-get update -qq

                         # Install Docker and Docker Compose if not already installed
                         if ! command -v docker &> /dev/null; then
                           echo "📦 Installing Docker..."
                           sudo apt-get install -y docker.io
                           sudo systemctl start docker
                           sudo systemctl enable docker
                           sudo usermod -aG docker ubuntu
                         fi

                         if ! command -v docker-compose &> /dev/null; then
                           echo "📦 Installing Docker Compose..."
                           sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                           sudo chmod +x /usr/local/bin/docker-compose
                         fi

                         # Navigate to or create the application directory
                         cd ~
                         if [ -d "MyProductionAPP" ]; then
                           echo "📁 Updating existing repository..."
                           cd MyProductionAPP
                           git pull origin master || git pull origin main || true
                         else
                           echo "📁 Cloning repository..."
                           git clone https://github.com/${{ github.repository }}.git MyProductionAPP
                           cd MyProductionAPP
                         fi

                         # Create production .env file
                         echo "📝 Setting up environment..."
                         cat > .env << 'ENVEOF'
                         DATABASE_URL=postgresql://postgres:Plmoknijb1234@db:5432/myappdb
                         SECRET_KEY=production_secret_key_change_this
                         ALGORITHM=HS256
                         ACCESS_TOKEN_EXPIRE_MINUTES=30
                         POSTGRES_USER=postgres
                         POSTGRES_PASSWORD=Plmoknijb1234
                         POSTGRES_DB=myappdb
                         DB_HOST=db
                         DB_PORT=5432
                         ENABLE_KAFKA=1
                         KAFKA_BOOTSTRAP_SERVERS=kafka:9092
                         KAFKA_TOPIC=orders
                         ENVIRONMENT=production
                         ENVEOF

                         # Stop existing containers
                         echo "🛑 Stopping existing containers..."
                         sudo docker-compose down || true

                         # Clean up old images
                         echo "🧹 Cleaning up old images..."
                         sudo docker system prune -f || true

                         # Build and start new containers
                         echo "🐳 Building and starting containers..."
                         sudo docker-compose up -d --build

                         # Wait for services to be ready
                         echo "⏳ Waiting for services to start..."
                         sleep 45

                         # Check if services are running
                         echo "✅ Checking service status..."
                         sudo docker-compose ps

                         # Test the application
                         echo "🏥 Testing application..."
                         for i in {1..5}; do
                           if curl -f http://localhost/health; then
                             echo "✅ Application is healthy!"
                             break
                           else
                             echo "⏳ Attempt $i failed, waiting..."
                             sleep 10
                           fi
                         done

                         echo "✅ Deployment completed on $(date)!"
                       EOF
